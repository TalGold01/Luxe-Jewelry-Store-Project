name: CI/CD Pipeline - Luxe Jewelry Store

# 1. Trigger the workflow on pushes to the main branch OR a new tag
on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Trigger on any tag starting with 'v' (e.g., v1.0.0)

# Define global environment variables
env:
  DOCKERHUB_REGISTRY: talgold01
  NEXUS_REGISTRY: localhost:8082/docker-hosted
  PROJECT_NAME: luxe-jewelry-store-project
  DEPLOY_ENV: development
  
  # VERSION CONTROL LOGIC: 
  # If triggered by a tag (refs/tags/vX.Y.Z), use the tag name (e.g., v1.0.0).
  # Otherwise (e.g., push to main), use the unique run ID.
  IMAGE_VERSION: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || github.run_id }} 

jobs:
  # The entire pipeline runs on a single runner
  ci_cd_pipeline:
    runs-on: ubuntu-latest
    
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      # --- UNIT TESTS STAGE ---

      - name: ‚öôÔ∏è Set up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: üì¶ Install Python Dependencies
        run: pip install pytest

      - name: üß™ Run Unit Tests
        working-directory: test
        run: pytest --maxfail=1 --disable-warnings -q

      # --- BUILD STAGE (using Version Control) ---

      - name: üõ†Ô∏è Setup Docker Compose
        # FIX: Ensure we use the modern 'docker compose' command
        run: docker compose version

      - name: üèóÔ∏è Build and Tag Docker Images for Nexus
        # Define the full, versioned tags as variables
        env:
          AUTH_TAG: ${{ env.NEXUS_REGISTRY }}/auth-service:${{ env.IMAGE_VERSION }}
          BACKEND_TAG: ${{ env.NEXUS_REGISTRY }}/backend:${{ env.IMAGE_VERSION }}
          FRONTEND_TAG: ${{ env.NEXUS_REGISTRY }}/frontend:${{ env.IMAGE_VERSION }}
        run: |
          cd infra
          echo "Starting Docker builds with tag: ${{ env.IMAGE_VERSION }}"
          
          # FIX: Build services individually and use --tag to correctly name the image 
          # for the Nexus registry. This eliminates the "No such image" error.
          
          # Build and tag auth-service directly
          docker compose build auth-service \
            --build-arg IMAGE_VERSION=${{ env.IMAGE_VERSION }} \
            --tag $AUTH_TAG
          
          # Build and tag backend directly
          docker compose build backend \
            --build-arg IMAGE_VERSION=${{ env.IMAGE_VERSION }} \
            --tag $BACKEND_TAG

          # Build and tag frontend directly
          docker compose build frontend \
            --build-arg IMAGE_VERSION=${{ env.IMAGE_VERSION }} \
            --tag $FRONTEND_TAG
          
          echo "All images successfully built and tagged for Nexus."

      # --- SECURITY SCAN STAGE ---
      
      - name: üõ°Ô∏è Snyk Security Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          AUTH_TAG: ${{ env.NEXUS_REGISTRY }}/auth-service:${{ env.IMAGE_VERSION }}
        uses: snyk/actions/docker@master
        with:
          image: ${{ env.AUTH_TAG }}
          severity: critical

      # --- PUSH STAGE (Only to Nexus) ---

      - name: üîë Log in to Nexus Repository (via Docker CLI)
        run: |
          echo "${{ secrets.NEXUS_PASSWORD }}" | docker login ${{ env.NEXUS_REGISTRY }} \
          --username ${{ secrets.NEXUS_USERNAME }} \
          --password-stdin
      
      - name: üöÄ Push Images to Nexus (Version Control Implemented)
        # Define the full tags again for the push commands
        env:
          AUTH_TAG: ${{ env.NEXUS_REGISTRY }}/auth-service:${{ env.IMAGE_VERSION }}
          BACKEND_TAG: ${{ env.NEXUS_REGISTRY }}/backend:${{ env.IMAGE_VERSION }}
          FRONTEND_TAG: ${{ env.NEXUS_REGISTRY }}/frontend:${{ env.IMAGE_VERSION }}
        run: |
          docker push $AUTH_TAG
          docker push $BACKEND_TAG
          docker push $FRONTEND_TAG

      # --- DEPLOYMENT STAGE ---
      
      - name: ‚òÅÔ∏è Deploy Services (Placeholder for Remote Deploy)
        run: |
          echo "Deployment to ${{ env.DEPLOY_ENV }} initiated using images tagged with version: ${{ env.IMAGE_VERSION }}"

      # --- POST: CLEANUP ---

      - name: üßπ Cleanup Docker Resources
        if: always()
        run: docker system prune -af