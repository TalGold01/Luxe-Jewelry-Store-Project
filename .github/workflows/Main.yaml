name: CI/CD Pipeline - Luxe Jewelry Store

on:
  push:
    branches:
      - main
    tags:
      - 'v*' 

env:
  DOCKERHUB_REGISTRY: talgold01
  NEXUS_REGISTRY: localhost:8082/docker-hosted  # CRITICAL: Replace with your actual Nexus URL
  PROJECT_NAME: luxe-jewelry-store-project 
  DEPLOY_ENV: development
  IMAGE_VERSION: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || github.run_id }} 

jobs:
  ci_cd_pipeline:
    runs-on: ubuntu-latest
    
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4
      
      - name: üîë Set up Snyk
        uses: snyk/actions/setup@master
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}

      - name: ‚öôÔ∏è Set up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - name: üì¶ Install Pytest Dependency
        run: pip install pytest 

      - name: üß™ Run Unit Tests
        working-directory: test
        run: pytest --maxfail=1 --disable-warnings -q

      - name: üõ†Ô∏è Setup Docker Compose
        run: docker compose version

      - name: üèóÔ∏è Build and Tag Docker Images for Nexus
        env:
          AUTH_SOURCE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.PROJECT_NAME }}-auth-service-latest
          BACKEND_SOURCE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.PROJECT_NAME }}-backend-latest
          FRONTEND_SOURCE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.PROJECT_NAME }}-frontend-latest
          AUTH_TAG: ${{ env.NEXUS_REGISTRY }}/auth-service:${{ env.IMAGE_VERSION }}
          BACKEND_TAG: ${{ env.NEXUS_REGISTRY }}/backend:${{ env.IMAGE_VERSION }}
          FRONTEND_TAG: ${{ env.NEXUS_REGISTRY }}/frontend:${{ env.IMAGE_VERSION }}
        run: |
          cd infra
          echo "Starting Docker builds with tag: ${{ env.IMAGE_VERSION }}"
          
          docker compose build \
            --build-arg IMAGE_VERSION=${{ env.IMAGE_VERSION }} \
            auth-service backend frontend 
          
          echo "=== BUILT IMAGES ==="
          docker images | grep ${{ env.PROJECT_NAME }} || true
          
          docker tag $AUTH_SOURCE_TAG $AUTH_TAG
          docker tag $BACKEND_SOURCE_TAG $BACKEND_TAG
          docker tag $FRONTEND_SOURCE_TAG $FRONTEND_TAG
          
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag $AUTH_SOURCE_TAG ${{ env.NEXUS_REGISTRY }}/auth-service:latest
            docker tag $BACKEND_SOURCE_TAG ${{ env.NEXUS_REGISTRY }}/backend:latest
            docker tag $FRONTEND_SOURCE_TAG ${{ env.NEXUS_REGISTRY }}/frontend:latest
          fi
          
          echo "All images built and tagged successfully."

      - name: üõ°Ô∏è Debug: Verify Images Exist Before Snyk Scan
        env:
          AUTH_SOURCE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.PROJECT_NAME }}-auth-service-latest
          BACKEND_SOURCE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.PROJECT_NAME }}-backend-latest
          FRONTEND_SOURCE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.PROJECT_NAME }}-frontend-latest
        run: |
          echo "Checking if local images exist:"
          docker image inspect $AUTH_SOURCE_TAG || echo "‚ùå AUTH image not found"
          docker image inspect $BACKEND_SOURCE_TAG || echo "‚ùå BACKEND image not found" 
          docker image inspect $FRONTEND_SOURCE_TAG || echo "‚ùå FRONTEND image not found"
          echo "All Docker images:"
          docker images | head -20

      - name: üõ°Ô∏è Snyk Container Scan - Auth Service
        uses: snyk/actions/docker@master
        with:
          image: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.PROJECT_NAME }}-auth-service-latest
          args: --severity-threshold=critical --json
        continue-on-error: true

      - name: üõ°Ô∏è Snyk Container Scan - Backend
        uses: snyk/actions/docker@master
        with:
          image: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.PROJECT_NAME }}-backend-latest
          args: --severity-threshold=critical --json
        continue-on-error: true

      - name: üõ°Ô∏è Snyk Container Scan - Frontend
        uses: snyk/actions/docker@master
        with:
          image: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.PROJECT_NAME }}-frontend-latest
          args: --severity-threshold=critical --json
        continue-on-error: true

      - name: üîë Log in to Nexus Repository
        run: |
          echo "${{ secrets.NEXUS_PASSWORD }}" | docker login ${{ env.NEXUS_REGISTRY }} \
          --username ${{ secrets.NEXUS_USERNAME }} \
          --password-stdin

      - name: üöÄ Push Images to Nexus
        env:
          AUTH_TAG: ${{ env.NEXUS_REGISTRY }}/auth-service:${{ env.IMAGE_VERSION }}
          BACKEND_TAG: ${{ env.NEXUS_REGISTRY }}/backend:${{ env.IMAGE_VERSION }}
          FRONTEND_TAG: ${{ env.NEXUS_REGISTRY }}/frontend:${{ env.IMAGE_VERSION }}
        run: |
          docker push $AUTH_TAG
          docker push $BACKEND_TAG
          docker push $FRONTEND_TAG
          
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker push ${{ env.NEXUS_REGISTRY }}/auth-service:latest
            docker push ${{ env.NEXUS_REGISTRY }}/backend:latest
            docker push ${{ env.NEXUS_REGISTRY }}/frontend:latest
          fi

      - name: ‚òÅÔ∏è Deploy Services
        run: |
          echo "Deployment to ${{ env.DEPLOY_ENV }} using images tagged with version: ${{ env.IMAGE_VERSION }}"
          echo "Nexus images:"
          echo "- auth-service:${{ env.IMAGE_VERSION }}"
          echo "- backend:${{ env.IMAGE_VERSION }}"
          echo "- frontend:${{ env.IMAGE_VERSION }}"

      - name: üßπ Cleanup Docker Resources
        if: always()
        run: |
          docker system prune -af
          docker volume prune -f